
Designing an LRU Cache with Priority and Expiration Time


Create a Least Recently Used (LRU) cache that supports priority management and expiration time for items.
The cache should adhere to the following rules:

If an item's expiration time has passed, remove it from the cache.
If multiple items have the same expiration time, removing any one suffices.
If there are no expired items, remove the item with the least priority.
In case multiple items have the least priority, remove the least recently used one.

Example 1:
Let's consider a cache with a capacity of 3:
Put("key1", "value1", priority=2, expiry=5 seconds from now)
Put("key2", "value2", priority=1, expiry=10 seconds from now)
Put("key3", "value3", priority=3, expiry=8 seconds from now)
Scenario:
After 7 seconds, Get("key1") returns "value1" as it's not yet expired.
After 12 seconds, Get("key2") returns None as it has expired and been removed from the cache.
Example 2:
Let's consider a cache with a capacity of 4:
Put("keyA", "valueA", priority=1, expiry=15 seconds from now)
Put("keyB", "valueB", priority=2, expiry=20 seconds from now)
Put("keyC", "valueC", priority=3, expiry=10 seconds from now)
Scenario:
After 5 seconds, Put("keyA", "updatedValueA", priority=4, expiry=12 seconds from now) updates the existing key "keyA" with a higher priority and a new expiration time.
After 8 seconds, Get("keyC") returns None as it has expired.
After 10 seconds, Get("keyA") returns "updatedValueA" with the new priority.
After 15 seconds, Get("keyB") returns None as it has expired and been removed from the cache.
